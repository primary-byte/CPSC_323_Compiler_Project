 "- ="
"- Token: TokenType { token: \"\", lexeme: _Reject, lexeme_name: \"\" }"
"- Rule: <Assign> -> <ID> = <Expression><ID> -> id"
"- c"
"- Token: TokenType { token: \"c\", lexeme: _Identifier, lexeme_name: \"IDENTIFIER\" }"
"- Rule: <ID> -> id"
"- +"
"- Token: TokenType { token: \"+\", lexeme: _Operator, lexeme_name: \"OPERATOR\" }"
"- Rule: <ExpressionPrime> -> +<Term> <ExpressionPrime>"
"- 3"
"- Token: TokenType { token: \"3\", lexeme: _Integer, lexeme_name: \"INTEGER\" }"
"- Rule: <factor> -> <num>"
"- *"
"- Token: TokenType { token: \"*\", lexeme: _Operator, lexeme_name: \"OPERATOR\" }"
"- Rule: <TermPrime> ->  *<Factor> <TermPrime>"
"- ("
"- Token: TokenType { token: \")\", lexeme: _Separator, lexeme_name: \"SEPARATOR\" }"
"- Rule: <Factor> -> ( <Expression> )<factor> -> <num>"
"- /"
"- Token: TokenType { token: \"/\", lexeme: _Operator, lexeme_name: \"OPERATOR\" }"
"- Rule: <TermPrime> ->  /<Factor> <TermPrime>"
"- 4"
"- Token: TokenType { token: \"4\", lexeme: _Integer, lexeme_name: \"INTEGER\" }"
"- Rule: <factor> -> <num>"
"- 2"
"- Token: TokenType { token: \"2\", lexeme: _Integer, lexeme_name: \"INTEGER\" }"
"- Rule: <factor> -> <num>"
"- 3"
"- Token: TokenType { token: \"3\", lexeme: _Integer, lexeme_name: \"INTEGER\" }"
"- Rule: <factor> -> <num>"
